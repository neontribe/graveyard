<?php

define("COTTAGE_TAG_VOCAB_MACHINE_NAME", "cottage_tag_vocab");

function nt2_entity_install() {
	$vocab = array(
		'name' => 'Cottage Tag Vocab',
		'machine_name' => COTTAGE_TAG_VOCAB_MACHINE_NAME,
		'description' => t('vocabulary of available cottage tags'),
		'module' => 'nt2_entity',
		'hierarchy' => 0,
	);

	taxonomy_vocabulary_save((object) $vocab);

	$vocab = taxonomy_vocabulary_machine_name_load(COTTAGE_TAG_VOCAB_MACHINE_NAME);
	$vid = $vocab->vid;

	//Set 'nt2_entity_vocab_id' to the ID of the vocabulary created for the entity.
	variable_set('nt2_entity_vocab_id', $vid);
};

function nt2_entity_disable() {
	taxonomy_vocabulary_delete(variable_get('nt2_entity_vocab_id'));
	variable_del('nt2_entity_vocab_id');
};

function nt2_entity_taxonomy_schema() {
	$schema = array();

	// $schema['taxonomy_term_data'] = array(
	// 	'description' => 'Store for tag data',
	// 	'fields' => array(
	// 		'tag_id' => array(
	// 			'description' => 'Tag Primary Key (unique ID of tag)',
	// 			'type' => 'serial',
	// 			'unsigned' => TRUE,
	// 			'not null' => TRUE,
	// 		),
	// 		'vocab_id' => array(
	// 			'description' => 'Unique ID of the vocabulary to which the tag is assigned.',
	// 			'type' => 'int',
	// 			'unsigned' => TRUE,
	// 			'not null' => TRUE,
	// 			'default' => 0,
	// 		),
	// 		'label' => array(
	// 			'type' => 'varchar',
	// 			'length' => 255,
	// 			'not null' => FALSE,
	// 			'default' => '',
	// 			'description' => 'The tag label.',
	// 			'translatable' => TRUE,
	// 		),
	// 		'description' => array(
	// 			'type' => 'text',
	// 			'not null' => FALSE,
	// 			'size' => 'big',
	// 			'description' => 'A description of the tag.',
	// 			'translatable' => TRUE,
	// 		),
	// 		'code' => array(
	// 			'type' => 'varchar',
	// 			'length' => 255,
	// 			'not null' => TRUE,
	// 			'default' => '',
	// 			'description' => 'The attribute code of the tag.',
	// 			'translatable' => TRUE,
	// 		),
	// 		'type' => array(
	// 			'type' => 'text',
	// 			'not null' => FALSE,
	// 			'size' => 'big',
	// 			'description' => 'The data type of the tag.',
	// 			'translatable' => FALSE,
	// 		),
	// 	),
	// 	'primary key' => array('tag_id'),
	// 	'foreign keys' => array(
	// 		'vocabulary' => array(
	// 			'table' => 'taxonomy_vocabulary',
	// 			'columns' => array('vocab_id', 'vocab_id'),
	// 		),
	// 	),
	// 	'indexes' => array(


	// 	)
	// );

	// $schema["taxonomy_vocabulary"] = array(
	// 	'description' => 'Store properties which will pertain to a vocabulary.',
	// 	'fields' => array(

	// 	)
	// );

	$schema['taxonomy_term_data'] = array(
	'description' => 'Stores term information.',
	'fields' => array(
	  'tid' => array(
		'type' => 'serial',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'description' => 'Primary Key: Unique term ID.',
	  ),
	  'vid' => array(
		'type' => 'int',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'default' => 0,
		'description' => 'The {taxonomy_vocabulary}.vid of the vocabulary to which the term is assigned.',
	  ),
	  'name' => array(
		'type' => 'varchar',
		'length' => 255,
		'not null' => TRUE,
		'default' => '',
		'description' => 'The term name.',
		'translatable' => TRUE,
	  ),
	  'description' => array(
		'type' => 'text',
		'not null' => FALSE,
		'size' => 'big',
		'description' => 'A description of the term.',
		'translatable' => TRUE,
	  ),
	  'format' => array(
		'type' => 'varchar',
		'length' => 255,
		'not null' => FALSE,
		'description' => 'The {filter_format}.format of the description.',
	  ),
	  'weight' => array(
		'type' => 'int',
		'not null' => TRUE,
		'default' => 0,
		'description' => 'The weight of this term in relation to other terms.',
	  ),
	),
	'primary key' => array('tid'),
	'foreign keys' => array(
	  'vocabulary' => array(
		'table' => 'taxonomy_vocabulary',
		'columns' => array('vid' => 'vid'),
	  ),
	),
	'indexes' => array(
	  'taxonomy_tree' => array('vid', 'weight', 'name'),
	  'vid_name' => array('vid', 'name'),
	  'name' => array('name'),
	),
  );

  $schema['taxonomy_term_hierarchy'] = array(
	'description' => 'Stores the hierarchical relationship between terms.',
	'fields' => array(
	  'tid' => array(
		'type' => 'int',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'default' => 0,
		'description' => 'Primary Key: The {taxonomy_term_data}.tid of the term.',
	  ),
	  'parent' => array(
		'type' => 'int',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'default' => 0,
		'description' => "Primary Key: The {taxonomy_term_data}.tid of the term's parent. 0 indicates no parent.",
	  ),
	),
	'indexes' => array(
	  'parent' => array('parent'),
	),
	'foreign keys' => array(
	  'taxonomy_term_data' => array(
		'table' => 'taxonomy_term_data',
		'columns' => array('tid' => 'tid'),
	  ),
	),
	'primary key' => array('tid', 'parent'),
  );

  $schema['taxonomy_vocabulary'] = array(
	'description' => 'Stores vocabulary information.',
	'fields' => array(
	  'vid' => array(
		'type' => 'serial',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'description' => 'Primary Key: Unique vocabulary ID.',
	  ),
	  'name' => array(
		'type' => 'varchar',
		'length' => 255,
		'not null' => TRUE,
		'default' => '',
		'description' => 'Name of the vocabulary.',
		'translatable' => TRUE,
	  ),
	  'machine_name' => array(
		'type' => 'varchar',
		'length' => 255,
		'not null' => TRUE,
		'default' => '',
		'description' => 'The vocabulary machine name.',
	  ),
	  'description' => array(
		'type' => 'text',
		'not null' => FALSE,
		'size' => 'big',
		'description' => 'Description of the vocabulary.',
		'translatable' => TRUE,
	  ),
	  'hierarchy' => array(
		'type' => 'int',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'default' => 0,
		'size' => 'tiny',
		'description' => 'The type of hierarchy allowed within the vocabulary. (0 = disabled, 1 = single, 2 = multiple)',
	  ),
	  'module' => array(
		'type' => 'varchar',
		'length' => 255,
		'not null' => TRUE,
		'default' => '',
		'description' => 'The module which created the vocabulary.',
	  ),
	  'weight' => array(
		'type' => 'int',
		'not null' => TRUE,
		'default' => 0,
		'description' => 'The weight of this vocabulary in relation to other vocabularies.',
	  ),
	),
	'primary key' => array('vid'),
	'indexes' => array(
	  'list' => array('weight', 'name'),
	),
	'unique keys' => array(
	  'machine_name' => array('machine_name'),
	),
  );

  $schema['taxonomy_index'] = array(
	'description' => 'Maintains denormalized information about node/term relationships.',
	'fields' => array(
	  'nid' => array(
		'description' => 'The {node}.nid this record tracks.',
		'type' => 'int',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'default' => 0,
	  ),
	  'tid' => array(
		'description' => 'The term ID.',
		'type' => 'int',
		'unsigned' => TRUE,
		'not null' => TRUE,
		'default' => 0,
	  ),
	  'sticky' => array(
		'description' => 'Boolean indicating whether the node is sticky.',
		'type' => 'int',
		'not null' => FALSE,
		'default' => 0,
		'size' => 'tiny',
	  ),
	  'created' => array(
		'description' => 'The Unix timestamp when the node was created.',
		'type' => 'int',
		'not null' => TRUE,
		'default' => 0,
	  ),
	),
	'indexes' => array(
	  'term_node' => array('tid', 'sticky', 'created'),
	  'nid' => array('nid'),
	),
	'foreign keys' => array(
	  'tracked_node' => array(
		'table' => 'node',
		'columns' => array('nid' => 'nid'),
	  ),
	  'term' => array(
		'table' => 'taxonomy_term_data',
		'columns' => array('tid' => 'tid'),
	  ),
	),
  );

return $schema;
};

//Hook onto the entity schema creation method and define how the data should be laid out.
//Keeping the number of properties to the bare minimum for now so as to determine whether it will work appropriately.
function nt2_entity_schema() {
	$schema = array();

	$schema['cottages'] = array(
		'description' => 'The base table for cottage entities',
		'fields' => array(
			'id' => array(
				'description' => 'Cottage Primary Key',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
			),
			'reference' => array(
				'description' => 'Cottage Reference',
				'type' => 'varchar',
				'length' => 255,
			),
			'brandcode' => array(
				'description' => 'Cottage Brandcode',
				'type' => 'varchar',
				'length' => 255,
			),
			'name' => array(
				'description' => 'Cottage Name',
				'type' => 'text',
				'size' => 'big',
				// 'default' => 'Default Cottage',
			)
		),
		'primary key' => array('id'),
	);

	return $schema;
};

				
				
