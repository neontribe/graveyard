<?php

/**
 * @file
 * NT2 Entity Module File
 */
 error_reporting(E_ALL);
// ini_set('display_errors', TRUE);
// ini_set('display_startup_errors', TRUE);



function nt2_entity_entity_info() {
	$info = array();

	$info['cottage'] = array(
		'label' => t('Cottage Entity'),
		'base table' => 'cottages',
		'entity keys' => array(
			'id' => 'id',
			'label' => 'name'
		),
		'module' => 'nt2_entity',
		'entity class' => 'Entity',
		'controller class' => 'nt2EntityEntityController',
	);

	return $info;
};

function nt2_entity_menu() {
  $items = array();

  $items['nt2_test'] = array(
		'title' => 'nt2_test',
		'page callback' => 'nt2_entity_test_view',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM
	);

  $items['admin/config/nt2_entity'] = array(
    'title' => 'NT2 Entity',
    'position' => 'right',
    'weight' => -25,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
  );

  $items['admin/config/nt2_entity/entity'] = array(
    'title' => 'NT2 Entity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nt2_entity_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'nt2_entity.admin.inc',
  );

  return $items;
}

/**
 * Create a taxonomy term and return the tid.
 */
function create_taxonomy_term($name, $vid, $parentTID = NULL) {
	$term = new stdClass();
	$term->name = $name;
	$term->vid = $vid;

	if($parentTID != NULL) {
		$term->parent = array($parentTID);
	}

	taxonomy_term_save($term);
	return $term->tid;
}

function taxonomy_term_exists($name) {
	$term = get_term_from_name($name);

	if($term != NULL) {
		return TRUE;
	}
	
	return FALSE;
}

function get_term_from_name($name) {
	$tid = taxonomy_get_term_by_name($name, variable_get("cottage_tag_vocab"));
	
	if(sizeof($tid) == 0) {
		return NULL;
	}

	return array_shift($tid)->tid;
}

function create_vocabulary() {
	$vocab = array(
		'name' => 'Cottage Tag Vocabulary',
		'machine_name' => variable_get("COTTAGE_TAG_VOCAB_MACHINE_NAME"),
		'description' => t('Vocabulary of available cottage tags'),
		'module' => 'nt2_entity',
		'hierarchy' => 1,
	);

	taxonomy_vocabulary_save((object) $vocab);

	$vocab = taxonomy_vocabulary_machine_name_load(variable_get("COTTAGE_TAG_VOCAB_MACHINE_NAME"));
	$vid = $vocab->vid;

	//Set 'nt2_entity_vocab_id' to the ID of the vocabulary created for the entity.
	variable_set('nt2_entity_vocab_id', $vid);
}

function setup_vocabulary_from_api($path) {
	#Construct request string.
	$data = NeontabsIO::getInstance()->get($path);

	#Create the vocabulary using the attributes contained in the data.
	$result = create_vocabulary_from_attrib_list($data["constants"]["attributes"]);

	return $result;
}

/**
 *	Create a vocabulary from a provided list of attributes from the API.	
 */
function create_vocabulary_from_attrib_list($attribs) {
	#Get the Vocabulary ID for cottages.
	$vid = variable_get('nt2_entity_vocab_id');

	foreach ($attribs as $attrib) {
		#Set the group variable.
		$currentGroup = $attrib["group"];
		#Set the term variable (label).
		$currentTerm = $attrib["label"];

		#Check if group parent of hierarchy exists; if it doesn't then add it to the hierarchy.
		$groupExists = taxonomy_term_exists($currentGroup);
		if(!$groupExists) {
			#Create a new primary term (parent set to NULL).
			create_taxonomy_term($currentGroup, $vid);
		};

		#Check if child element exists; if it doesn't then add it to the hierarchy.
		$labelExists = taxonomy_term_exists($currentTerm);
		if(!$labelExists) {
			#Create a new term with the parent being set to the current group.
			create_taxonomy_term($currentTerm, $vid, get_term_from_name($currentGroup));	
		};	
	};

	return sizeof($attribs);
}

function nt2_entity_test_view() {
	$items = array();

	//Test that the api works
	// $path = sprintf('property/' . strtoupper("A241") . '_ZZ');
	// $data = NeontabsIO::getInstance()->get($path);
	// dpm($data);



	//Load the first cottage in the database (added manually)
	// $cottages = entity_load('cottage', FALSE);
	// $list = entity_view('cottage', $cottages);
	
	// if(array_key_exists('cottage', $list)) {
	// 	foreach ($list['cottage'] as $cottage) {
	// 		$items[] = drupal_render($cottage);
	// 	}
		
	// }


	// if(!isset($cottages[1000])) {
	// 	$entity = entity_create('cottage', array('id' => 1000));
	// 	$entity->reference = t('6969');
	// 	$entity->brandcode = t('6969');
	// 	$entity->name = t('Spring House');
	// 	$entity->save();
	// }

	return implode($items);
}