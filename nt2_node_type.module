<?php

function nt2_node_type_menu() {
  $items = array();

  $items['nt2_node_type_test'] = array(
    'title' => 'nt2_node_type_test',
    'page arguments' => array(1, 2),
    'page callback' => 'nt2_node_type_test_view',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );

  $items['nt2_node_type_test/%/node'] = array(
    'title' => 'nt2_node_type_test',
    'page callback' => 'nt2_node_type_test_view',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );

  $items['nt2_node_type_test/%/teaser'] = array(
    'title' => 'nt2_node_type_test',
    'page callback' => 'nt2_node_type_test_view',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );

  $items['admin/config/nt2_node_type_test'] = array(
    'title' => 'NT2 Entity',
    'position' => 'right',
    'weight' => -25,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
  );

  $items['admin/config/nt2_node_type_test/entity'] = array(
    'title' => 'NT2 Entity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nt2_node_type_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'nt2_node_type.admin.inc',
  );

  return $items;
}

function nt2_node_type_test_view($propref, $type) {

  $node = CottageNodeManager::getNode($propref);
  $node_output = nt2_node_type_node_render_array($node);

  return $node_output;
}

function nt2_node_type_node_render_array(&$node) {
    $render_array = array();

    $render_array['cottage_name'] = array(
        '#type' => 'markup',
        '#markup' => $node->title,
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
    );

    // Build images array.
    $render_array['images'] = array(
        '#prefix' => '<ul>',
        '#suffix' => '</ul>',
    );
    $images = $node->cottage_images['und'];
    $index = 0;
    foreach ($images as $image) {
        list($alt, $title, $url) = explode("\n", $image['value']);

        $_image = array(
            '#prefix' => '<li>',
            '#suffix' => '</li>',
            '#theme' => 'imagecache_external',
            '#path' => $url,
            '#style_name' => 'thumbnail',
            '#alt' => $alt,
            '#title' => $title,
        );
        $render_array['images']['image' . sprintf('%02d', $index++)] = $_image;
    }
    
    // Process the address using a custom template.
    $address = array(
      '#theme' => 'nt2_node_type_address',
      '#address' => $node->cottage_fieldaddress['und'][0],
    );
    $render_array['address'] = $address;

    $render = array(
        'property' => $render_array,
    );

    dpm($render, 'Property Render array');
    dpm($node, 'Node');

    return $render;
}

function nt2_node_type_create_and_populate_vocabs() {
    
    $vocab_definition_cottage_tags = (object) array(
        'name' => 'Cottage Tag Vocab',
        'machine_name' => variable_get("COTTAGE_VOCAB_MACHINE_NAME"),
        'description' => 'A vocabulary used to store cottage tags.',
        'weight' => 0,
    );

    $vocab_definition_cottage_location = (object) array(
        'name' => 'Cottage Location Vocab',
        'machine_name' => variable_get("COTTAGE_LOC_VOCAB_MACHINE_NAME"),
        'description' => 'A vocabulary used to store cottage location information.',
        'weight' => 0,
    );

    $vocab_tag_fields = array(  
        'tag_code' => array(
          'field_name' => 'tag_code',
          'data_key_name' => 'code',
          'type' => 'text',
        ),
        'tag_brand' => array(
          'field_name' => 'tag_brand',
          'data_key_name' => 'brand',
          'type' => 'text',
        ),
    );

    $vocab_loc_fields = array(  
        'loc_code' => array(
          'field_name' => 'loc_code',
          'data_key_name' => 'code',
          'type' => 'text',
        ),
        'loc_name' => array(
          'field_name' => 'loc_name',
          'data_key_name' => 'name',
          'type' => 'text',
        ),
        'loc_brand' => array(
          'field_name' => 'loc_brand',
          'data_key_name' => 'brand',
          'type' => 'text',
        ),
        // 'loc_coordinates' => array(
        //   'field_name' => 'loc_coordinates',
        //   'data_key_name' => 'coordinates',
        //   'type' => 'text',
        // ),
    );

    #Create the cottage tag vocabulary. (TODO: generalise this function to allow it to create any Vocab we need)
    $cottage_vocab_tag_creation_status = CottageVocabManager::createCottageTagVocabulary(variable_get("COTTAGE_VOCAB_MACHINE_NAME"), $vocab_definition_cottage_tags, $vocab_tag_fields);

    #Populate the vocabulary from the API (TODO: generalise this too)
    $data = NeontabsIO::getInstance()->get("/");

    CottageVocabManager::create_vocabulary_from_attrib_list(variable_get("COTTAGE_VOCAB_MACHINE_NAME"), $data["constants"]["attributes"], $vocab_tag_fields, "group", "label");


    ## Create and populate cottage location vocabulary.
    $cottage_vocab_location_creation_status = CottageVocabManager::createCottageTagVocabulary(variable_get("COTTAGE_LOC_VOCAB_MACHINE_NAME"), $vocab_definition_cottage_location, $vocab_loc_fields);
    
    $data = NeontabsIO::getInstance()->get("/utility/area");

    CottageVocabManager::create_vocabulary_from_attrib_list(variable_get("COTTAGE_LOC_VOCAB_MACHINE_NAME"), $data, $vocab_loc_fields, 'code', "locations");
}

function nt2_node_type_node_view($node, $view_mode, $langcode) {
    if ($node->type=="cottage_entity"){
        if ($view_mode == 'full'){
            $node_output = nt2_node_type_node_render_array($node);
            $node->content['nt2_node'] = $node_output;
        }
        return $node;
    }
}

function nt2_node_type_theme() {
  return array(
    'nt2_node_type_address' => array(
      'variables' => array(
        'address' => NULL,
      ),
      'template' => 'templates/nt2_node_type_address'
    ),
  );
}

function nt2_node_type_preprocess_nt2_node_type_address(&$vars) {
  dpm($vars, '$vars before');
  if (isset($vars['address'])) {
    $vars['addr1'] = 'aaaa';
    $vars['addr2'] = 'bbbb';
    $vars['city'] = $vars['address']['locality'];
    $vars['county'] = 'cccc';
    $vars['postcode'] = 'dddd';
  }
  dpm($vars, '$vars after');
}